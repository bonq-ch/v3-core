/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SwapRouterInterface extends Interface {
  getFunction(
    nameOrSignature: "swap" | "test" | "uniswapV3SwapCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Debug"
      | "SwapAttempted"
      | "SwapFailed"
      | "TokenTransfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string, data: BytesLike];
  export type OutputTuple = [message: string, data: string];
  export interface OutputObject {
    message: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAttemptedEvent {
  export type InputTuple = [
    pool: AddressLike,
    zeroForOne: boolean,
    amountIn: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    zeroForOne: boolean,
    amountIn: bigint,
    sqrtPriceLimitX96: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    pool: string;
    zeroForOne: boolean;
    amountIn: bigint;
    sqrtPriceLimitX96: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapFailedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferEvent {
  export type InputTuple = [
    step: string,
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    step: string,
    token: string,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    step: string;
    token: string;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapRouter extends BaseContract {
  connect(runner?: ContractRunner | null): SwapRouter;
  waitForDeployment(): Promise<this>;

  interface: SwapRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swap: TypedContractMethod<
    [
      pool: AddressLike,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  test: TypedContractMethod<[], [boolean], "view">;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "test"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "SwapAttempted"
  ): TypedContractEvent<
    SwapAttemptedEvent.InputTuple,
    SwapAttemptedEvent.OutputTuple,
    SwapAttemptedEvent.OutputObject
  >;
  getEvent(
    key: "SwapFailed"
  ): TypedContractEvent<
    SwapFailedEvent.InputTuple,
    SwapFailedEvent.OutputTuple,
    SwapFailedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransfer"
  ): TypedContractEvent<
    TokenTransferEvent.InputTuple,
    TokenTransferEvent.OutputTuple,
    TokenTransferEvent.OutputObject
  >;

  filters: {
    "Debug(string,bytes)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "SwapAttempted(address,bool,uint256,uint160,uint256)": TypedContractEvent<
      SwapAttemptedEvent.InputTuple,
      SwapAttemptedEvent.OutputTuple,
      SwapAttemptedEvent.OutputObject
    >;
    SwapAttempted: TypedContractEvent<
      SwapAttemptedEvent.InputTuple,
      SwapAttemptedEvent.OutputTuple,
      SwapAttemptedEvent.OutputObject
    >;

    "SwapFailed(string)": TypedContractEvent<
      SwapFailedEvent.InputTuple,
      SwapFailedEvent.OutputTuple,
      SwapFailedEvent.OutputObject
    >;
    SwapFailed: TypedContractEvent<
      SwapFailedEvent.InputTuple,
      SwapFailedEvent.OutputTuple,
      SwapFailedEvent.OutputObject
    >;

    "TokenTransfer(string,address,address,address,uint256)": TypedContractEvent<
      TokenTransferEvent.InputTuple,
      TokenTransferEvent.OutputTuple,
      TokenTransferEvent.OutputObject
    >;
    TokenTransfer: TypedContractEvent<
      TokenTransferEvent.InputTuple,
      TokenTransferEvent.OutputTuple,
      TokenTransferEvent.OutputObject
    >;
  };
}
